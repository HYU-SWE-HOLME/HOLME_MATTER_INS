// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: aircon.proto

package InstanceAircon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Aircon_HandleFrame_FullMethodName = "/HOLME_instance.Aircon/HandleFrame"
)

// AirconClient is the client API for Aircon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirconClient interface {
	HandleFrame(ctx context.Context, in *AirconFrame, opts ...grpc.CallOption) (*AirconRes, error)
}

type airconClient struct {
	cc grpc.ClientConnInterface
}

func NewAirconClient(cc grpc.ClientConnInterface) AirconClient {
	return &airconClient{cc}
}

func (c *airconClient) HandleFrame(ctx context.Context, in *AirconFrame, opts ...grpc.CallOption) (*AirconRes, error) {
	out := new(AirconRes)
	err := c.cc.Invoke(ctx, Aircon_HandleFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirconServer is the server API for Aircon service.
// All implementations must embed UnimplementedAirconServer
// for forward compatibility
type AirconServer interface {
	HandleFrame(context.Context, *AirconFrame) (*AirconRes, error)
	mustEmbedUnimplementedAirconServer()
}

// UnimplementedAirconServer must be embedded to have forward compatible implementations.
type UnimplementedAirconServer struct {
}

func (UnimplementedAirconServer) HandleFrame(context.Context, *AirconFrame) (*AirconRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedAirconServer) mustEmbedUnimplementedAirconServer() {}

// UnsafeAirconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirconServer will
// result in compilation errors.
type UnsafeAirconServer interface {
	mustEmbedUnimplementedAirconServer()
}

func RegisterAirconServer(s grpc.ServiceRegistrar, srv AirconServer) {
	s.RegisterService(&Aircon_ServiceDesc, srv)
}

func _Aircon_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirconFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirconServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aircon_HandleFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirconServer).HandleFrame(ctx, req.(*AirconFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// Aircon_ServiceDesc is the grpc.ServiceDesc for Aircon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aircon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.Aircon",
	HandlerType: (*AirconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _Aircon_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aircon.proto",
}
