// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: merged.proto

package hivemind

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AiSpeakerClient is the client API for AiSpeaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiSpeakerClient interface {
	HandleFrame(ctx context.Context, in *AiSpeakerFrame, opts ...grpc.CallOption) (*AiSpeakerRes, error)
}

type aiSpeakerClient struct {
	cc grpc.ClientConnInterface
}

func NewAiSpeakerClient(cc grpc.ClientConnInterface) AiSpeakerClient {
	return &aiSpeakerClient{cc}
}

func (c *aiSpeakerClient) HandleFrame(ctx context.Context, in *AiSpeakerFrame, opts ...grpc.CallOption) (*AiSpeakerRes, error) {
	out := new(AiSpeakerRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.AiSpeaker/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiSpeakerServer is the server API for AiSpeaker service.
// All implementations must embed UnimplementedAiSpeakerServer
// for forward compatibility
type AiSpeakerServer interface {
	HandleFrame(context.Context, *AiSpeakerFrame) (*AiSpeakerRes, error)
	mustEmbedUnimplementedAiSpeakerServer()
}

// UnimplementedAiSpeakerServer must be embedded to have forward compatible implementations.
type UnimplementedAiSpeakerServer struct {
}

func (UnimplementedAiSpeakerServer) HandleFrame(context.Context, *AiSpeakerFrame) (*AiSpeakerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedAiSpeakerServer) mustEmbedUnimplementedAiSpeakerServer() {}

// UnsafeAiSpeakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiSpeakerServer will
// result in compilation errors.
type UnsafeAiSpeakerServer interface {
	mustEmbedUnimplementedAiSpeakerServer()
}

func RegisterAiSpeakerServer(s grpc.ServiceRegistrar, srv AiSpeakerServer) {
	s.RegisterService(&AiSpeaker_ServiceDesc, srv)
}

func _AiSpeaker_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AiSpeakerFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiSpeakerServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.AiSpeaker/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiSpeakerServer).HandleFrame(ctx, req.(*AiSpeakerFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// AiSpeaker_ServiceDesc is the grpc.ServiceDesc for AiSpeaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiSpeaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.AiSpeaker",
	HandlerType: (*AiSpeakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _AiSpeaker_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// AirconClient is the client API for Aircon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirconClient interface {
	HandleFrame(ctx context.Context, in *AirconFrame, opts ...grpc.CallOption) (*AirconRes, error)
}

type airconClient struct {
	cc grpc.ClientConnInterface
}

func NewAirconClient(cc grpc.ClientConnInterface) AirconClient {
	return &airconClient{cc}
}

func (c *airconClient) HandleFrame(ctx context.Context, in *AirconFrame, opts ...grpc.CallOption) (*AirconRes, error) {
	out := new(AirconRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.Aircon/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirconServer is the server API for Aircon service.
// All implementations must embed UnimplementedAirconServer
// for forward compatibility
type AirconServer interface {
	HandleFrame(context.Context, *AirconFrame) (*AirconRes, error)
	mustEmbedUnimplementedAirconServer()
}

// UnimplementedAirconServer must be embedded to have forward compatible implementations.
type UnimplementedAirconServer struct {
}

func (UnimplementedAirconServer) HandleFrame(context.Context, *AirconFrame) (*AirconRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedAirconServer) mustEmbedUnimplementedAirconServer() {}

// UnsafeAirconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirconServer will
// result in compilation errors.
type UnsafeAirconServer interface {
	mustEmbedUnimplementedAirconServer()
}

func RegisterAirconServer(s grpc.ServiceRegistrar, srv AirconServer) {
	s.RegisterService(&Aircon_ServiceDesc, srv)
}

func _Aircon_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirconFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirconServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.Aircon/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirconServer).HandleFrame(ctx, req.(*AirconFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// Aircon_ServiceDesc is the grpc.ServiceDesc for Aircon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aircon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.Aircon",
	HandlerType: (*AirconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _Aircon_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// CurtainClient is the client API for Curtain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurtainClient interface {
	HandleFrame(ctx context.Context, in *CurtainFrame, opts ...grpc.CallOption) (*CurtainRes, error)
}

type curtainClient struct {
	cc grpc.ClientConnInterface
}

func NewCurtainClient(cc grpc.ClientConnInterface) CurtainClient {
	return &curtainClient{cc}
}

func (c *curtainClient) HandleFrame(ctx context.Context, in *CurtainFrame, opts ...grpc.CallOption) (*CurtainRes, error) {
	out := new(CurtainRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.Curtain/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurtainServer is the server API for Curtain service.
// All implementations must embed UnimplementedCurtainServer
// for forward compatibility
type CurtainServer interface {
	HandleFrame(context.Context, *CurtainFrame) (*CurtainRes, error)
	mustEmbedUnimplementedCurtainServer()
}

// UnimplementedCurtainServer must be embedded to have forward compatible implementations.
type UnimplementedCurtainServer struct {
}

func (UnimplementedCurtainServer) HandleFrame(context.Context, *CurtainFrame) (*CurtainRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedCurtainServer) mustEmbedUnimplementedCurtainServer() {}

// UnsafeCurtainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurtainServer will
// result in compilation errors.
type UnsafeCurtainServer interface {
	mustEmbedUnimplementedCurtainServer()
}

func RegisterCurtainServer(s grpc.ServiceRegistrar, srv CurtainServer) {
	s.RegisterService(&Curtain_ServiceDesc, srv)
}

func _Curtain_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurtainFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurtainServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.Curtain/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurtainServer).HandleFrame(ctx, req.(*CurtainFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// Curtain_ServiceDesc is the grpc.ServiceDesc for Curtain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Curtain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.Curtain",
	HandlerType: (*CurtainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _Curtain_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// LightBulbClient is the client API for LightBulb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightBulbClient interface {
	HandleFrame(ctx context.Context, in *LightBulbFrame, opts ...grpc.CallOption) (*LightBulbRes, error)
}

type lightBulbClient struct {
	cc grpc.ClientConnInterface
}

func NewLightBulbClient(cc grpc.ClientConnInterface) LightBulbClient {
	return &lightBulbClient{cc}
}

func (c *lightBulbClient) HandleFrame(ctx context.Context, in *LightBulbFrame, opts ...grpc.CallOption) (*LightBulbRes, error) {
	out := new(LightBulbRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.LightBulb/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightBulbServer is the server API for LightBulb service.
// All implementations must embed UnimplementedLightBulbServer
// for forward compatibility
type LightBulbServer interface {
	HandleFrame(context.Context, *LightBulbFrame) (*LightBulbRes, error)
	mustEmbedUnimplementedLightBulbServer()
}

// UnimplementedLightBulbServer must be embedded to have forward compatible implementations.
type UnimplementedLightBulbServer struct {
}

func (UnimplementedLightBulbServer) HandleFrame(context.Context, *LightBulbFrame) (*LightBulbRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedLightBulbServer) mustEmbedUnimplementedLightBulbServer() {}

// UnsafeLightBulbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightBulbServer will
// result in compilation errors.
type UnsafeLightBulbServer interface {
	mustEmbedUnimplementedLightBulbServer()
}

func RegisterLightBulbServer(s grpc.ServiceRegistrar, srv LightBulbServer) {
	s.RegisterService(&LightBulb_ServiceDesc, srv)
}

func _LightBulb_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightBulbFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightBulbServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.LightBulb/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightBulbServer).HandleFrame(ctx, req.(*LightBulbFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// LightBulb_ServiceDesc is the grpc.ServiceDesc for LightBulb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LightBulb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.LightBulb",
	HandlerType: (*LightBulbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _LightBulb_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// MassageChairClient is the client API for MassageChair service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MassageChairClient interface {
	HandleFrame(ctx context.Context, in *MassageChairFrame, opts ...grpc.CallOption) (*MassageChairRes, error)
}

type massageChairClient struct {
	cc grpc.ClientConnInterface
}

func NewMassageChairClient(cc grpc.ClientConnInterface) MassageChairClient {
	return &massageChairClient{cc}
}

func (c *massageChairClient) HandleFrame(ctx context.Context, in *MassageChairFrame, opts ...grpc.CallOption) (*MassageChairRes, error) {
	out := new(MassageChairRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.MassageChair/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MassageChairServer is the server API for MassageChair service.
// All implementations must embed UnimplementedMassageChairServer
// for forward compatibility
type MassageChairServer interface {
	HandleFrame(context.Context, *MassageChairFrame) (*MassageChairRes, error)
	mustEmbedUnimplementedMassageChairServer()
}

// UnimplementedMassageChairServer must be embedded to have forward compatible implementations.
type UnimplementedMassageChairServer struct {
}

func (UnimplementedMassageChairServer) HandleFrame(context.Context, *MassageChairFrame) (*MassageChairRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedMassageChairServer) mustEmbedUnimplementedMassageChairServer() {}

// UnsafeMassageChairServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MassageChairServer will
// result in compilation errors.
type UnsafeMassageChairServer interface {
	mustEmbedUnimplementedMassageChairServer()
}

func RegisterMassageChairServer(s grpc.ServiceRegistrar, srv MassageChairServer) {
	s.RegisterService(&MassageChair_ServiceDesc, srv)
}

func _MassageChair_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MassageChairFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassageChairServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.MassageChair/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassageChairServer).HandleFrame(ctx, req.(*MassageChairFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// MassageChair_ServiceDesc is the grpc.ServiceDesc for MassageChair service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MassageChair_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.MassageChair",
	HandlerType: (*MassageChairServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _MassageChair_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// RefrigeratorClient is the client API for Refrigerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefrigeratorClient interface {
	HandleFrame(ctx context.Context, in *RefrigeratorFrame, opts ...grpc.CallOption) (*RefrigeratorRes, error)
}

type refrigeratorClient struct {
	cc grpc.ClientConnInterface
}

func NewRefrigeratorClient(cc grpc.ClientConnInterface) RefrigeratorClient {
	return &refrigeratorClient{cc}
}

func (c *refrigeratorClient) HandleFrame(ctx context.Context, in *RefrigeratorFrame, opts ...grpc.CallOption) (*RefrigeratorRes, error) {
	out := new(RefrigeratorRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.Refrigerator/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefrigeratorServer is the server API for Refrigerator service.
// All implementations must embed UnimplementedRefrigeratorServer
// for forward compatibility
type RefrigeratorServer interface {
	HandleFrame(context.Context, *RefrigeratorFrame) (*RefrigeratorRes, error)
	mustEmbedUnimplementedRefrigeratorServer()
}

// UnimplementedRefrigeratorServer must be embedded to have forward compatible implementations.
type UnimplementedRefrigeratorServer struct {
}

func (UnimplementedRefrigeratorServer) HandleFrame(context.Context, *RefrigeratorFrame) (*RefrigeratorRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedRefrigeratorServer) mustEmbedUnimplementedRefrigeratorServer() {}

// UnsafeRefrigeratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefrigeratorServer will
// result in compilation errors.
type UnsafeRefrigeratorServer interface {
	mustEmbedUnimplementedRefrigeratorServer()
}

func RegisterRefrigeratorServer(s grpc.ServiceRegistrar, srv RefrigeratorServer) {
	s.RegisterService(&Refrigerator_ServiceDesc, srv)
}

func _Refrigerator_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefrigeratorFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefrigeratorServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.Refrigerator/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefrigeratorServer).HandleFrame(ctx, req.(*RefrigeratorFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// Refrigerator_ServiceDesc is the grpc.ServiceDesc for Refrigerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Refrigerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.Refrigerator",
	HandlerType: (*RefrigeratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _Refrigerator_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// SoundbarClient is the client API for Soundbar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoundbarClient interface {
	HandleFrame(ctx context.Context, in *SoundbarFrame, opts ...grpc.CallOption) (*SoundbarRes, error)
}

type soundbarClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundbarClient(cc grpc.ClientConnInterface) SoundbarClient {
	return &soundbarClient{cc}
}

func (c *soundbarClient) HandleFrame(ctx context.Context, in *SoundbarFrame, opts ...grpc.CallOption) (*SoundbarRes, error) {
	out := new(SoundbarRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.Soundbar/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoundbarServer is the server API for Soundbar service.
// All implementations must embed UnimplementedSoundbarServer
// for forward compatibility
type SoundbarServer interface {
	HandleFrame(context.Context, *SoundbarFrame) (*SoundbarRes, error)
	mustEmbedUnimplementedSoundbarServer()
}

// UnimplementedSoundbarServer must be embedded to have forward compatible implementations.
type UnimplementedSoundbarServer struct {
}

func (UnimplementedSoundbarServer) HandleFrame(context.Context, *SoundbarFrame) (*SoundbarRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedSoundbarServer) mustEmbedUnimplementedSoundbarServer() {}

// UnsafeSoundbarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundbarServer will
// result in compilation errors.
type UnsafeSoundbarServer interface {
	mustEmbedUnimplementedSoundbarServer()
}

func RegisterSoundbarServer(s grpc.ServiceRegistrar, srv SoundbarServer) {
	s.RegisterService(&Soundbar_ServiceDesc, srv)
}

func _Soundbar_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundbarFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundbarServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.Soundbar/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundbarServer).HandleFrame(ctx, req.(*SoundbarFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// Soundbar_ServiceDesc is the grpc.ServiceDesc for Soundbar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Soundbar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.Soundbar",
	HandlerType: (*SoundbarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _Soundbar_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// TelevisionClient is the client API for Television service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelevisionClient interface {
	HandleFrame(ctx context.Context, in *TelevisionFrame, opts ...grpc.CallOption) (*TelevisionRes, error)
}

type televisionClient struct {
	cc grpc.ClientConnInterface
}

func NewTelevisionClient(cc grpc.ClientConnInterface) TelevisionClient {
	return &televisionClient{cc}
}

func (c *televisionClient) HandleFrame(ctx context.Context, in *TelevisionFrame, opts ...grpc.CallOption) (*TelevisionRes, error) {
	out := new(TelevisionRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.Television/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelevisionServer is the server API for Television service.
// All implementations must embed UnimplementedTelevisionServer
// for forward compatibility
type TelevisionServer interface {
	HandleFrame(context.Context, *TelevisionFrame) (*TelevisionRes, error)
	mustEmbedUnimplementedTelevisionServer()
}

// UnimplementedTelevisionServer must be embedded to have forward compatible implementations.
type UnimplementedTelevisionServer struct {
}

func (UnimplementedTelevisionServer) HandleFrame(context.Context, *TelevisionFrame) (*TelevisionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedTelevisionServer) mustEmbedUnimplementedTelevisionServer() {}

// UnsafeTelevisionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelevisionServer will
// result in compilation errors.
type UnsafeTelevisionServer interface {
	mustEmbedUnimplementedTelevisionServer()
}

func RegisterTelevisionServer(s grpc.ServiceRegistrar, srv TelevisionServer) {
	s.RegisterService(&Television_ServiceDesc, srv)
}

func _Television_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelevisionFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelevisionServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.Television/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelevisionServer).HandleFrame(ctx, req.(*TelevisionFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// Television_ServiceDesc is the grpc.ServiceDesc for Television service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Television_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.Television",
	HandlerType: (*TelevisionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _Television_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}

// WaterDispenserClient is the client API for WaterDispenser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaterDispenserClient interface {
	HandleFrame(ctx context.Context, in *WaterDispenserFrame, opts ...grpc.CallOption) (*WaterDispenserRes, error)
}

type waterDispenserClient struct {
	cc grpc.ClientConnInterface
}

func NewWaterDispenserClient(cc grpc.ClientConnInterface) WaterDispenserClient {
	return &waterDispenserClient{cc}
}

func (c *waterDispenserClient) HandleFrame(ctx context.Context, in *WaterDispenserFrame, opts ...grpc.CallOption) (*WaterDispenserRes, error) {
	out := new(WaterDispenserRes)
	err := c.cc.Invoke(ctx, "/HOLME_instance.WaterDispenser/HandleFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaterDispenserServer is the server API for WaterDispenser service.
// All implementations must embed UnimplementedWaterDispenserServer
// for forward compatibility
type WaterDispenserServer interface {
	HandleFrame(context.Context, *WaterDispenserFrame) (*WaterDispenserRes, error)
	mustEmbedUnimplementedWaterDispenserServer()
}

// UnimplementedWaterDispenserServer must be embedded to have forward compatible implementations.
type UnimplementedWaterDispenserServer struct {
}

func (UnimplementedWaterDispenserServer) HandleFrame(context.Context, *WaterDispenserFrame) (*WaterDispenserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedWaterDispenserServer) mustEmbedUnimplementedWaterDispenserServer() {}

// UnsafeWaterDispenserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaterDispenserServer will
// result in compilation errors.
type UnsafeWaterDispenserServer interface {
	mustEmbedUnimplementedWaterDispenserServer()
}

func RegisterWaterDispenserServer(s grpc.ServiceRegistrar, srv WaterDispenserServer) {
	s.RegisterService(&WaterDispenser_ServiceDesc, srv)
}

func _WaterDispenser_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaterDispenserFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterDispenserServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HOLME_instance.WaterDispenser/HandleFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterDispenserServer).HandleFrame(ctx, req.(*WaterDispenserFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// WaterDispenser_ServiceDesc is the grpc.ServiceDesc for WaterDispenser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaterDispenser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.WaterDispenser",
	HandlerType: (*WaterDispenserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _WaterDispenser_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merged.proto",
}
