// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: waterDispenser.proto

package InstanceWaterDispenser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WaterDispenser_HandleFrame_FullMethodName = "/HOLME_instance.WaterDispenser/HandleFrame"
)

// WaterDispenserClient is the client API for WaterDispenser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaterDispenserClient interface {
	HandleFrame(ctx context.Context, in *WaterDispenserFrame, opts ...grpc.CallOption) (*WaterDispenserRes, error)
}

type waterDispenserClient struct {
	cc grpc.ClientConnInterface
}

func NewWaterDispenserClient(cc grpc.ClientConnInterface) WaterDispenserClient {
	return &waterDispenserClient{cc}
}

func (c *waterDispenserClient) HandleFrame(ctx context.Context, in *WaterDispenserFrame, opts ...grpc.CallOption) (*WaterDispenserRes, error) {
	out := new(WaterDispenserRes)
	err := c.cc.Invoke(ctx, WaterDispenser_HandleFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaterDispenserServer is the server API for WaterDispenser service.
// All implementations must embed UnimplementedWaterDispenserServer
// for forward compatibility
type WaterDispenserServer interface {
	HandleFrame(context.Context, *WaterDispenserFrame) (*WaterDispenserRes, error)
	mustEmbedUnimplementedWaterDispenserServer()
}

// UnimplementedWaterDispenserServer must be embedded to have forward compatible implementations.
type UnimplementedWaterDispenserServer struct {
}

func (UnimplementedWaterDispenserServer) HandleFrame(context.Context, *WaterDispenserFrame) (*WaterDispenserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedWaterDispenserServer) mustEmbedUnimplementedWaterDispenserServer() {}

// UnsafeWaterDispenserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaterDispenserServer will
// result in compilation errors.
type UnsafeWaterDispenserServer interface {
	mustEmbedUnimplementedWaterDispenserServer()
}

func RegisterWaterDispenserServer(s grpc.ServiceRegistrar, srv WaterDispenserServer) {
	s.RegisterService(&WaterDispenser_ServiceDesc, srv)
}

func _WaterDispenser_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaterDispenserFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterDispenserServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterDispenser_HandleFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterDispenserServer).HandleFrame(ctx, req.(*WaterDispenserFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// WaterDispenser_ServiceDesc is the grpc.ServiceDesc for WaterDispenser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaterDispenser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.WaterDispenser",
	HandlerType: (*WaterDispenserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _WaterDispenser_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "waterDispenser.proto",
}
