// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: aiSpeaker.proto

package InstanceAiSpeaker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AiSpeaker_HandleFrame_FullMethodName = "/HOLME_instance.AiSpeaker/HandleFrame"
)

// AiSpeakerClient is the client API for AiSpeaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiSpeakerClient interface {
	HandleFrame(ctx context.Context, in *AiSpeakerFrame, opts ...grpc.CallOption) (*AiSpeakerRes, error)
}

type aiSpeakerClient struct {
	cc grpc.ClientConnInterface
}

func NewAiSpeakerClient(cc grpc.ClientConnInterface) AiSpeakerClient {
	return &aiSpeakerClient{cc}
}

func (c *aiSpeakerClient) HandleFrame(ctx context.Context, in *AiSpeakerFrame, opts ...grpc.CallOption) (*AiSpeakerRes, error) {
	out := new(AiSpeakerRes)
	err := c.cc.Invoke(ctx, AiSpeaker_HandleFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiSpeakerServer is the server API for AiSpeaker service.
// All implementations must embed UnimplementedAiSpeakerServer
// for forward compatibility
type AiSpeakerServer interface {
	HandleFrame(context.Context, *AiSpeakerFrame) (*AiSpeakerRes, error)
	mustEmbedUnimplementedAiSpeakerServer()
}

// UnimplementedAiSpeakerServer must be embedded to have forward compatible implementations.
type UnimplementedAiSpeakerServer struct {
}

func (UnimplementedAiSpeakerServer) HandleFrame(context.Context, *AiSpeakerFrame) (*AiSpeakerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedAiSpeakerServer) mustEmbedUnimplementedAiSpeakerServer() {}

// UnsafeAiSpeakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiSpeakerServer will
// result in compilation errors.
type UnsafeAiSpeakerServer interface {
	mustEmbedUnimplementedAiSpeakerServer()
}

func RegisterAiSpeakerServer(s grpc.ServiceRegistrar, srv AiSpeakerServer) {
	s.RegisterService(&AiSpeaker_ServiceDesc, srv)
}

func _AiSpeaker_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AiSpeakerFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiSpeakerServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiSpeaker_HandleFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiSpeakerServer).HandleFrame(ctx, req.(*AiSpeakerFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// AiSpeaker_ServiceDesc is the grpc.ServiceDesc for AiSpeaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiSpeaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.AiSpeaker",
	HandlerType: (*AiSpeakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _AiSpeaker_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aiSpeaker.proto",
}
