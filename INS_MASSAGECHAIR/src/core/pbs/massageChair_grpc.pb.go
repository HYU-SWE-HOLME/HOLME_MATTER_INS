// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: massageChair.proto

package InstanceMassageChair

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MassageChair_HandleFrame_FullMethodName = "/HOLME_instance.MassageChair/HandleFrame"
)

// MassageChairClient is the client API for MassageChair service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MassageChairClient interface {
	HandleFrame(ctx context.Context, in *MassageChairFrame, opts ...grpc.CallOption) (*MassageChairRes, error)
}

type massageChairClient struct {
	cc grpc.ClientConnInterface
}

func NewMassageChairClient(cc grpc.ClientConnInterface) MassageChairClient {
	return &massageChairClient{cc}
}

func (c *massageChairClient) HandleFrame(ctx context.Context, in *MassageChairFrame, opts ...grpc.CallOption) (*MassageChairRes, error) {
	out := new(MassageChairRes)
	err := c.cc.Invoke(ctx, MassageChair_HandleFrame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MassageChairServer is the server API for MassageChair service.
// All implementations must embed UnimplementedMassageChairServer
// for forward compatibility
type MassageChairServer interface {
	HandleFrame(context.Context, *MassageChairFrame) (*MassageChairRes, error)
	mustEmbedUnimplementedMassageChairServer()
}

// UnimplementedMassageChairServer must be embedded to have forward compatible implementations.
type UnimplementedMassageChairServer struct {
}

func (UnimplementedMassageChairServer) HandleFrame(context.Context, *MassageChairFrame) (*MassageChairRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFrame not implemented")
}
func (UnimplementedMassageChairServer) mustEmbedUnimplementedMassageChairServer() {}

// UnsafeMassageChairServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MassageChairServer will
// result in compilation errors.
type UnsafeMassageChairServer interface {
	mustEmbedUnimplementedMassageChairServer()
}

func RegisterMassageChairServer(s grpc.ServiceRegistrar, srv MassageChairServer) {
	s.RegisterService(&MassageChair_ServiceDesc, srv)
}

func _MassageChair_HandleFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MassageChairFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassageChairServer).HandleFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MassageChair_HandleFrame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassageChairServer).HandleFrame(ctx, req.(*MassageChairFrame))
	}
	return interceptor(ctx, in, info, handler)
}

// MassageChair_ServiceDesc is the grpc.ServiceDesc for MassageChair service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MassageChair_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HOLME_instance.MassageChair",
	HandlerType: (*MassageChairServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFrame",
			Handler:    _MassageChair_HandleFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "massageChair.proto",
}
